"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var nativescript_keystore_access_1 = require("nativescript-keystore-access");
var dialogs = require("tns-core-modules/ui/dialogs");
function pageLoaded(args) {
    var page = args.object;
    page.bindingContext = new KeystoreDemoComponent();
}
exports.pageLoaded = pageLoaded;
var KeystoreDemoComponent = (function (_super) {
    __extends(KeystoreDemoComponent, _super);
    function KeystoreDemoComponent() {
        var _this = _super.call(this) || this;
        _this.secretText = "Dette er hemmeligt";
        _this.useCustomUI = false;
        _this.keystoreAccess = new nativescript_keystore_access_1.KeystoreAccess();
        return _this;
    }
    KeystoreDemoComponent.prototype.available = function () {
        var _this = this;
        this.useCustomUI = false;
        this.set("infoMessage", "");
        this.keystoreAccess.available().then(function (result) {
            console.log("doCheckAvailable result: " + JSON.stringify(result));
            dialogs.alert("Biometric ID available? - " + (result.any ? (result.face ? "Face" : "Touch") : "NO"));
            _this.useCustomUI = result.customUI;
        })
            .catch(function (err) {
            console.log("doCheckAvailable error: " + err.code + ", " + err.message);
            dialogs.alert("Error: " + err.code + ", " + err.message);
        });
    };
    KeystoreDemoComponent.prototype.encryptData = function () {
        var _this = this;
        if (this.useCustomUI) {
            this.set("infoMessage", "Scan yer finger now");
        }
        this.keystoreAccess.storeDataWithFingerprint("ALIAS", this.secretText, "Biometric Message").then(function (result) {
            console.log("storeDataWithFingerprint result: OK");
            _this.set("infoMessage", "");
            dialogs.alert("storeDataWithFingerprint result: OK");
        })
            .catch(function (err) {
            console.log("storeDataWithFingerprint error: " + err.code + ", " + err.message);
            _this.set("infoMessage", "");
            dialogs.alert("Error: " + err.code + ", " + err.message);
        });
    };
    KeystoreDemoComponent.prototype.decryptData = function () {
        var _this = this;
        if (this.useCustomUI) {
            this.set("infoMessage", "Scan yer finger now");
        }
        this.keystoreAccess.retrieveDataWithFingerprint("ALIAS", "PROMPT").then(function (result) {
            console.log("retrieveDataWithFingerprint result: " + result);
            _this.set("infoMessage", "");
            dialogs.alert("retrieveDataWithFingerprint result: " + result);
        })
            .catch(function (err) {
            console.log("retrieveDataWithFingerprint error: " + err.code + ", " + err.message);
            _this.set("infoMessage", "");
            dialogs.alert("Error: " + err.code + ", " + err.message);
        });
    };
    KeystoreDemoComponent.prototype.dataExists = function () {
        this.set("infoMessage", "");
        if (this.keystoreAccess.fingerprintEncryptedDataExists("ALIAS")) {
            dialogs.alert("Encrypted data exists - YES");
        }
        else {
            dialogs.alert("Encrypted data exists - NO");
        }
    };
    KeystoreDemoComponent.prototype.deleteData = function () {
        this.set("infoMessage", "");
        this.keystoreAccess.deleteFingerprintEncryptedData("ALIAS");
    };
    return KeystoreDemoComponent;
}(observable_1.Observable));
exports.KeystoreDemoComponent = KeystoreDemoComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQXlFO0FBR3pFLDZFQUdzQztBQUN0QyxxREFBdUQ7QUFHdkQsb0JBQTJCLElBQTBCO0lBRWpELElBQUksSUFBSSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDbkMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUM7QUFDdEQsQ0FBQztBQUpELGdDQUlDO0FBRUQ7SUFBMkMseUNBQVU7SUFNakQ7UUFBQSxZQUNJLGlCQUFPLFNBRVY7UUFQTSxnQkFBVSxHQUFXLG9CQUFvQixDQUFDO1FBRXpDLGlCQUFXLEdBQUcsS0FBSyxDQUFDO1FBSXhCLEtBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSw2Q0FBYyxFQUFFLENBQUM7O0lBQy9DLENBQUM7SUFFRCx5Q0FBUyxHQUFUO1FBQUEsaUJBYUM7UUFaRyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FDaEMsVUFBQyxNQUFrQztZQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNsRSxPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3JHLEtBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FB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O1NBQy9DO0lBQ0wsQ0FBQztJQUVELDBDQUFVLEdBQVY7UUFDSSxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsY0FBYyxDQUFDLDhCQUE4QixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFTCw0QkFBQztBQUFELENBQUMsQUExRUQsQ0FBMkMsdUJBQVUsR0EwRXBEO0FBMUVZLHNEQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIEV2ZW50RGF0YSB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCAqIGFzIG9ic2VydmFibGUgZnJvbSAndG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGUnO1xuaW1wb3J0ICogYXMgcGFnZXMgZnJvbSAndG5zLWNvcmUtbW9kdWxlcy91aS9wYWdlJztcbmltcG9ydCB7XG4gICAgS2V5c3RvcmVBY2Nlc3MsXG4gICAgQmlvbWV0cmljSURBdmFpbGFibGVSZXN1bHRcbn0gZnJvbSAnbmF0aXZlc2NyaXB0LWtleXN0b3JlLWFjY2Vzcyc7XG5pbXBvcnQgKiBhcyBkaWFsb2dzIGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2RpYWxvZ3NcIjtcblxuLy8gRXZlbnQgaGFuZGxlciBmb3IgUGFnZSAnbG9hZGVkJyBldmVudCBhdHRhY2hlZCBpbiBtYWluLXBhZ2UueG1sXG5leHBvcnQgZnVuY3Rpb24gcGFnZUxvYWRlZChhcmdzOiBvYnNlcnZhYmxlLkV2ZW50RGF0YSkge1xuICAgIC8vIEdldCB0aGUgZXZlbnQgc2VuZGVyXG4gICAgbGV0IHBhZ2UgPSA8cGFnZXMuUGFnZT5hcmdzLm9iamVjdDtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gbmV3IEtleXN0b3JlRGVtb0NvbXBvbmVudCgpO1xufVxuXG5leHBvcnQgY2xhc3MgS2V5c3RvcmVEZW1vQ29tcG9uZW50IGV4dGVuZHMgT2JzZXJ2YWJsZSB7XG4gICAgcHVibGljIGluZm9NZXNzYWdlOiBzdHJpbmc7XG4gICAgcHVibGljIHNlY3JldFRleHQ6IHN0cmluZyA9IFwiRGV0dGUgZXIgaGVtbWVsaWd0XCI7XG4gICAgcHJpdmF0ZSBrZXlzdG9yZUFjY2VzczogS2V5c3RvcmVBY2Nlc3M7XG4gICAgcHJpdmF0ZSB1c2VDdXN0b21VSSA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMua2V5c3RvcmVBY2Nlc3MgPSBuZXcgS2V5c3RvcmVBY2Nlc3MoKTtcbiAgICB9XG5cbiAgICBhdmFpbGFibGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXNlQ3VzdG9tVUkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXQoXCJpbmZvTWVzc2FnZVwiLCBcIlwiKTsvLyBSZW1vdmUgY3VzdG9tIFVJXG4gICAgICAgIHRoaXMua2V5c3RvcmVBY2Nlc3MuYXZhaWxhYmxlKCkudGhlbihcbiAgICAgICAgICAgIChyZXN1bHQ6IEJpb21ldHJpY0lEQXZhaWxhYmxlUmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJkb0NoZWNrQXZhaWxhYmxlIHJlc3VsdDogXCIgKyBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICBkaWFsb2dzLmFsZXJ0KFwiQmlvbWV0cmljIElEIGF2YWlsYWJsZT8gLSBcIiArIChyZXN1bHQuYW55ID8gKHJlc3VsdC5mYWNlID8gXCJGYWNlXCIgOiBcIlRvdWNoXCIpIDogXCJOT1wiKSk7XG4gICAgICAgICAgICAgICAgdGhpcy51c2VDdXN0b21VSSA9IHJlc3VsdC5jdXN0b21VSTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImRvQ2hlY2tBdmFpbGFibGUgZXJyb3I6IFwiICsgZXJyLmNvZGUgKyBcIiwgXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgZGlhbG9ncy5hbGVydChcIkVycm9yOiBcIiArIGVyci5jb2RlICsgXCIsIFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZW5jcnlwdERhdGEoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnVzZUN1c3RvbVVJKSB7XG4gICAgICAgICAgICB0aGlzLnNldChcImluZm9NZXNzYWdlXCIsIFwiU2NhbiB5ZXIgZmluZ2VyIG5vd1wiKTsvLyBTaG93IGN1c3RvbSBVSVxuICAgICAgICB9XG4gICAgICAgIHRoaXMua2V5c3RvcmVBY2Nlc3Muc3RvcmVEYXRhV2l0aEZpbmdlcnByaW50KFwiQUxJQVNcIiwgdGhpcy5zZWNyZXRUZXh0LCBcIkJpb21ldHJpYyBNZXNzYWdlXCIpLnRoZW4oXG4gICAgICAgICAgICAocmVzdWx0OiB2b2lkKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdG9yZURhdGFXaXRoRmluZ2VycHJpbnQgcmVzdWx0OiBPS1wiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImluZm9NZXNzYWdlXCIsIFwiXCIpOy8vIFJlbW92ZSBjdXN0b20gVUlcbiAgICAgICAgICAgICAgICBkaWFsb2dzLmFsZXJ0KFwic3RvcmVEYXRhV2l0aEZpbmdlcnByaW50IHJlc3VsdDogT0tcIik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdG9yZURhdGFXaXRoRmluZ2VycHJpbnQgZXJyb3I6IFwiICsgZXJyLmNvZGUgKyBcIiwgXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpbmZvTWVzc2FnZVwiLCBcIlwiKTsvLyBSZW1vdmUgY3VzdG9tIFVJXG4gICAgICAgICAgICAgICAgZGlhbG9ncy5hbGVydChcIkVycm9yOiBcIiArIGVyci5jb2RlICsgXCIsIFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVjcnlwdERhdGEoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnVzZUN1c3RvbVVJKSB7XG4gICAgICAgICAgICB0aGlzLnNldChcImluZm9NZXNzYWdlXCIsIFwiU2NhbiB5ZXIgZmluZ2VyIG5vd1wiKTsvLyBTaG93IGN1c3RvbSBVSVxuICAgICAgICB9XG4gICAgICAgIHRoaXMua2V5c3RvcmVBY2Nlc3MucmV0cmlldmVEYXRhV2l0aEZpbmdlcnByaW50KFwiQUxJQVNcIiwgXCJQUk9NUFRcIikudGhlbihcbiAgICAgICAgICAgIChyZXN1bHQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmV0cmlldmVEYXRhV2l0aEZpbmdlcnByaW50IHJlc3VsdDogXCIgKyByZXN1bHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaW5mb01lc3NhZ2VcIiwgXCJcIik7Ly8gUmVtb3ZlIGN1c3RvbSBVSVxuICAgICAgICAgICAgICAgIGRpYWxvZ3MuYWxlcnQoXCJyZXRyaWV2ZURhdGFXaXRoRmluZ2VycHJpbnQgcmVzdWx0OiBcIiArIHJlc3VsdCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZXRyaWV2ZURhdGFXaXRoRmluZ2VycHJpbnQgZXJyb3I6IFwiICsgZXJyLmNvZGUgKyBcIiwgXCIgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpbmZvTWVzc2FnZVwiLCBcIlwiKTsvLyBSZW1vdmUgY3VzdG9tIFVJXG4gICAgICAgICAgICAgICAgZGlhbG9ncy5hbGVydChcIkVycm9yOiBcIiArIGVyci5jb2RlICsgXCIsIFwiICsgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGF0YUV4aXN0cygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXQoXCJpbmZvTWVzc2FnZVwiLCBcIlwiKTsvLyBSZW1vdmUgY3VzdG9tIFVJXG4gICAgICAgIGlmICh0aGlzLmtleXN0b3JlQWNjZXNzLmZpbmdlcnByaW50RW5jcnlwdGVkRGF0YUV4aXN0cyhcIkFMSUFTXCIpKSB7XG4gICAgICAgICAgICBkaWFsb2dzLmFsZXJ0KFwiRW5jcnlwdGVkIGRhdGEgZXhpc3RzIC0gWUVTXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlhbG9ncy5hbGVydChcIkVuY3J5cHRlZCBkYXRhIGV4aXN0cyAtIE5PXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVsZXRlRGF0YSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXQoXCJpbmZvTWVzc2FnZVwiLCBcIlwiKTsvLyBSZW1vdmUgY3VzdG9tIFVJXG4gICAgICAgIHRoaXMua2V5c3RvcmVBY2Nlc3MuZGVsZXRlRmluZ2VycHJpbnRFbmNyeXB0ZWREYXRhKFwiQUxJQVNcIik7XG4gICAgfVxuXG59Il19