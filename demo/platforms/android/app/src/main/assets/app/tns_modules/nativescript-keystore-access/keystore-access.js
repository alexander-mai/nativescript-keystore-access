"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils = require("tns-core-modules/utils/utils");
var keystore_access_common_1 = require("./keystore-access.common");
var KeystoreAccess = (function (_super) {
    __extends(KeystoreAccess, _super);
    function KeystoreAccess() {
        var _this = _super.call(this) || this;
        _this.keyguardManager = utils.ad.getApplicationContext().getSystemService("keyguard");
        if (android.os.Build.VERSION.SDK_INT >= 23) {
            _this.fingerprintManager = utils.ad.getApplicationContext().getSystemService(android.hardware.fingerprint.FingerprintManager.class);
        }
        return _this;
    }
    KeystoreAccess.prototype.available = function () {
        var _this = this;
        this.stopListening();
        return new Promise(function (resolve, reject) {
            try {
                if (!_this.keyguardManager || !_this.keyguardManager.isKeyguardSecure()) {
                    resolve({
                        any: false,
                        customUI: true
                    });
                    return;
                }
                if (android.os.Build.VERSION.SDK_INT < 23) {
                    resolve({
                        any: false,
                        reason: "Your api version doesn't support fingerprint authentication",
                        customUI: true
                    });
                    return;
                }
                if (!_this.fingerprintManager.isHardwareDetected()) {
                    resolve({
                        any: false,
                        reason: "Device doesn't support fingerprint authentication",
                        customUI: true
                    });
                }
                else if (!_this.fingerprintManager.hasEnrolledFingerprints()) {
                    resolve({
                        any: false,
                        reason: "User hasn't enrolled any fingerprints to authenticate with",
                        customUI: true
                    });
                }
                else {
                    resolve({
                        any: true,
                        touch: true,
                        customUI: true
                    });
                }
            }
            catch (ex) {
                console.log("fingerprint-auth.available: " + ex);
                reject(ex);
            }
        });
    };
    KeystoreAccess.prototype.useCustomUI = function () {
        return true;
    };
    KeystoreAccess.prototype.storeDataWithFingerprint = function (keystoreKeyAlias, data, biometricMessage) {
        var _this = this;
        this.stopListening();
        return new Promise(function (resolve, reject) {
            _this.promiseResolve = resolve;
            _this.promiseReject = reject;
            try {
                _this.keystoreKeyAlias = keystoreKeyAlias;
                _this.data = data;
                _this.cipherInEncryptMode = true;
                _this.createKey(keystoreKeyAlias);
                _this.startListening();
            }
            catch (ex) {
                console.trace(ex);
                _this.deleteFingerprintEncryptedData(keystoreKeyAlias);
                reject({
                    code: keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR,
                    message: ex.message,
                });
            }
        });
    };
    KeystoreAccess.prototype.retrieveDataWithFingerprint = function (keystoreKeyAlias, biometricPromptMessage) {
        var _this = this;
        this.stopListening();
        return new Promise(function (resolve, reject) {
            _this.promiseResolve = resolve;
            _this.promiseReject = reject;
            try {
                _this.cipherInEncryptMode = false;
                _this.keystoreKeyAlias = keystoreKeyAlias;
                _this.startListening();
            }
            catch (ex) {
                _this.deleteFingerprintEncryptedData(keystoreKeyAlias);
                reject({
                    code: keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR,
                    message: ex.message,
                });
            }
        });
    };
    KeystoreAccess.prototype.fingerprintEncryptedDataExists = function (keystoreKeyAlias) {
        this.stopListening();
        this.keystoreKeyAlias = keystoreKeyAlias;
        var preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(utils.ad.getApplicationContext());
        return preferences.contains(KeystoreAccess.name + this.keystoreKeyAlias);
    };
    KeystoreAccess.prototype.deleteFingerprintEncryptedData = function (keystoreKeyAlias) {
        this.stopListening();
        this.keystoreKeyAlias = keystoreKeyAlias;
        var preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(utils.ad.getApplicationContext());
        preferences.edit().remove(KeystoreAccess.name + this.keystoreKeyAlias).apply();
    };
    KeystoreAccess.prototype.cleanup = function () {
        this.stopListening();
    };
    KeystoreAccess.prototype.createKey = function (keystoreKeyAlias) {
        try {
            this.keyStore = java.security.KeyStore.getInstance('AndroidKeyStore');
            this.keyStore.load(null);
            var keyGenerator = javax.crypto.KeyGenerator.getInstance(android.security.keystore.KeyProperties.KEY_ALGORITHM_AES, 'AndroidKeyStore');
            keyGenerator.init(new android.security.keystore.KeyGenParameterSpec.Builder(keystoreKeyAlias, android.security.keystore.KeyProperties.PURPOSE_ENCRYPT | android.security.keystore.KeyProperties.PURPOSE_DECRYPT)
                .setBlockModes([android.security.keystore.KeyProperties.BLOCK_MODE_CBC])
                .setUserAuthenticationRequired(true)
                .setUserAuthenticationValidityDurationSeconds(30)
                .setEncryptionPaddings([android.security.keystore.KeyProperties.ENCRYPTION_PADDING_PKCS7])
                .setKeySize(256)
                .build());
            keyGenerator.generateKey();
        }
        catch (ex) {
            console.trace(ex);
            this.promiseReject({
                code: keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR,
                message: ex.message,
            });
        }
    };
    KeystoreAccess.prototype.initCipher = function (mode, keystoreKeyAlias) {
        try {
            this.keyStore = java.security.KeyStore.getInstance('AndroidKeyStore');
            this.keyStore.load(null);
            var key = this.keyStore.getKey(keystoreKeyAlias, null);
            this.cipher = javax.crypto.Cipher.getInstance(android.security.keystore.KeyProperties.KEY_ALGORITHM_AES + "/" + android.security.keystore.KeyProperties.BLOCK_MODE_CBC + "/" + android.security.keystore.KeyProperties.ENCRYPTION_PADDING_PKCS7);
            this.cryptoObject = new android.hardware.fingerprint.FingerprintManager.CryptoObject(this.cipher);
            if (mode == javax.crypto.Cipher.ENCRYPT_MODE) {
                this.cipher.init(javax.crypto.Cipher.ENCRYPT_MODE, key);
            }
            else {
                if (key != null) {
                    var preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(utils.ad.getApplicationContext());
                    var ivString = preferences.getString(KeystoreAccess.name + keystoreKeyAlias + "_encryption_iv", null);
                    if (ivString != null) {
                        var javaString = new java.lang.String(new java.lang.StringBuffer(ivString));
                        this.encryptionIv = android.util.Base64.decode(javaString.getBytes("UTF-8"), android.util.Base64.DEFAULT);
                        this.cipher.init(javax.crypto.Cipher.DECRYPT_MODE, key, new javax.crypto.spec.IvParameterSpec(this.encryptionIv));
                    }
                }
                else {
                    this.promiseReject({
                        code: keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR,
                        message: "IV not found while decrypting.",
                    });
                }
            }
        }
        catch (ex) {
            console.trace(ex);
            if (ex instanceof android.security.keystore.KeyPermanentlyInvalidatedException) {
                this.promiseReject({
                    code: keystore_access_common_1.ERROR_CODES.TAMPERED_WITH,
                    message: ex.getMessage(),
                });
            }
            else {
                this.promiseReject({
                    code: keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR,
                    message: ex.message,
                });
            }
        }
    };
    KeystoreAccess.prototype.tryEncrypt = function (secret) {
        try {
            this.encryptionIv = this.cipher.getIV();
            var encrypted = new java.lang.String(android.util.Base64.encode(this.cipher.doFinal(secret.getBytes("UTF-8")), android.util.Base64.DEFAULT), "UTF-8").toString();
            var preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(utils.ad.getApplicationContext());
            var ivString = new java.lang.String(android.util.Base64.encode(this.encryptionIv, android.util.Base64.DEFAULT), "UTF-8").toString();
            preferences.edit().putString(KeystoreAccess.name + this.keystoreKeyAlias, encrypted).putString(KeystoreAccess.name + this.keystoreKeyAlias + "_encryption_iv", ivString).apply();
        }
        catch (ex) {
            console.trace(ex);
            this.promiseReject({
                code: keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR,
                message: ex.message,
            });
        }
    };
    KeystoreAccess.prototype.tryDecrypt = function () {
        try {
            var preferences = android.preference.PreferenceManager.getDefaultSharedPreferences(utils.ad.getApplicationContext());
            var sb = new java.lang.StringBuffer(preferences.getString(KeystoreAccess.name + this.keystoreKeyAlias, ""));
            var secret = android.util.Base64.decode(new java.lang.String(sb).getBytes("UTF-8"), android.util.Base64.DEFAULT);
            var decrypted = this.cipher.doFinal(secret);
            return new java.lang.String(decrypted, "UTF-8").toString();
        }
        catch (ex) {
            console.trace(ex);
            this.promiseReject({
                code: keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR,
                message: ex.message,
            });
        }
        return null;
    };
    KeystoreAccess.prototype.startListening = function () {
        this.cancellationSignal = new android.os.CancellationSignal();
        this.fingerprintManager.authenticate(this.cryptoObject, this.cancellationSignal, 0, this, null);
    };
    KeystoreAccess.prototype.stopListening = function () {
        if (this.cancellationSignal != null) {
            this.cancellationSignal.cancel();
            this.cancellationSignal = null;
        }
    };
    KeystoreAccess.prototype.onAuthenticationError = function (errorCode, errString) {
        this.promiseReject({
            code: keystore_access_common_1.ERROR_CODES.AUTHENTICATION_FAILED,
            message: errString,
            errorCode: errorCode
        });
    };
    KeystoreAccess.prototype.onAuthenticationHelp = function (helpCode, helpString) {
        if (helpCode == 1) {
            this.promiseReject({
                code: keystore_access_common_1.ERROR_CODES.RECOVERABLE_ERROR_FINGER_MUST_COVER_SENSOR,
                message: helpString
            });
        }
        else if (helpCode == 5) {
            this.promiseReject({
                code: keystore_access_common_1.ERROR_CODES.RECOVERABLE_ERROR_FINGER_MOVED_TO_FAST,
                message: helpString
            });
        }
        else {
            this.promiseReject({
                code: keystore_access_common_1.ERROR_CODES.RECOVERABLE_ERROR_BIOMETRICS_NOT_RECOGNIZED,
                message: helpString
            });
        }
    };
    KeystoreAccess.prototype.onAuthenticationSucceeded = function (result) {
        if (this.cipherInEncryptMode) {
            this.initCipher(javax.crypto.Cipher.ENCRYPT_MODE, this.keystoreKeyAlias);
            this.tryEncrypt(new java.lang.String(this.data));
            this.promiseResolve();
        }
        else {
            this.initCipher(javax.crypto.Cipher.DECRYPT_MODE, this.keystoreKeyAlias);
            var decrypted = this.tryDecrypt();
            console.log(decrypted);
            this.promiseResolve(decrypted);
        }
    };
    KeystoreAccess.prototype.onAuthenticationFailed = function () {
        this.promiseReject({
            code: keystore_access_common_1.ERROR_CODES.AUTHENTICATION_FAILED,
            message: "Finger not recognized"
        });
    };
    return KeystoreAccess;
}(android.hardware.fingerprint.FingerprintManager.AuthenticationCallback));
exports.KeystoreAccess = KeystoreAccess;
//# sourceMappingURL=data:application/json;base64,