"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils = require("tns-core-modules/utils/utils");
var keystore_access_common_1 = require("./keystore-access.common");
var keychainItemIdentifier = "TouchIDKey";
var KeystoreAccess = (function () {
    function KeystoreAccess() {
    }
    KeystoreAccess.prototype.available = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var laContext = LAContext.new();
                var hasBio = laContext.canEvaluatePolicyError(1);
                if (hasBio) {
                    if (utils.ios.MajorVersion < 9) {
                        resolve({
                            any: false,
                            customUI: false
                        });
                        return;
                    }
                    var FingerprintDatabaseStateKey = "FingerprintDatabaseStateKey";
                    var state = laContext.evaluatedPolicyDomainState;
                    if (state !== null) {
                        var stateStr = state.base64EncodedStringWithOptions(0);
                        var standardUserDefaults = utils.ios.getter(NSUserDefaults, NSUserDefaults.standardUserDefaults);
                        var storedState = standardUserDefaults.stringForKey(FingerprintDatabaseStateKey);
                        standardUserDefaults.setObjectForKey(stateStr, FingerprintDatabaseStateKey);
                        standardUserDefaults.synchronize();
                        var changed = storedState !== null && stateStr !== storedState;
                        if (changed) {
                            _this.parseError(reject, keystore_access_common_1.ERROR_CODES.TAMPERED_WITH, "Biometrics was changed");
                            return;
                        }
                    }
                }
                resolve({
                    any: hasBio,
                    touch: hasBio && laContext.biometryType === 1,
                    face: hasBio && laContext.biometryType === 2,
                    customUI: false
                });
            }
            catch (ex) {
                console.trace(ex);
                resolve({
                    any: false,
                    customUI: false
                });
            }
        });
    };
    KeystoreAccess.prototype.useCustomUI = function () {
        return false;
    };
    KeystoreAccess.prototype.storeDataWithFingerprint = function (keystoreKeyAlias, data, biometricMessage) {
        var _this = this;
        this.keychainItemServiceName = keystoreKeyAlias;
        return new Promise(function (resolve, reject) {
            try {
                var laContext_1 = LAContext.new();
                if (!laContext_1.canEvaluatePolicyError(1)) {
                    reject({
                        code: keystore_access_common_1.ERROR_CODES.NOT_AVAILABLE,
                        message: "Not available",
                    });
                    return;
                }
                laContext_1.localizedFallbackTitle = "";
                laContext_1.evaluatePolicyLocalizedReasonReply(1, biometricMessage, function (ok, error) {
                    if (ok) {
                        _this.deleteFingerprintEncryptedData(keystoreKeyAlias);
                        if (_this.createKeyChainEntry(laContext_1, data)) {
                            resolve();
                        }
                    }
                    else {
                        _this.parseError(reject, error.code, error.localizedDescription);
                    }
                });
            }
            catch (ex) {
                console.trace(ex);
                _this.parseError(reject, keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR, ex.message);
            }
        });
    };
    KeystoreAccess.prototype.retrieveDataWithFingerprint = function (keystoreKeyAlias, biometricPromptMessage) {
        var _this = this;
        this.keychainItemServiceName = keystoreKeyAlias;
        return new Promise(function (resolve, reject) {
            try {
                var result = _this.readKeyChainEntry(biometricPromptMessage);
                console.log("retrieveDataWithFingerprint: " + result);
                if (result) {
                    resolve(result);
                }
                else {
                    _this.parseError(reject, keystore_access_common_1.ERROR_CODES.AUTHENTICATION_FAILED, "Decryption failed");
                }
            }
            catch (ex) {
                console.trace(ex);
                _this.parseError(reject, keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR, ex.message);
            }
        });
    };
    KeystoreAccess.prototype.fingerprintEncryptedDataExists = function (keystoreKeyAlias) {
        this.keychainItemServiceName = keystoreKeyAlias;
        var attributes = NSMutableDictionary.new();
        attributes.setObjectForKey(kSecClassGenericPassword, kSecClass);
        attributes.setObjectForKey(keystoreKeyAlias, kSecAttrService);
        attributes.setObjectForKey(kSecMatchLimitOne, kSecMatchLimit);
        attributes.setObjectForKey(true, kSecReturnData);
        var privKeyRef = new interop.Reference();
        var status = SecItemCopyMatching(attributes, privKeyRef);
        if (status == errSecSuccess) {
            return true;
        }
        return false;
    };
    KeystoreAccess.prototype.deleteFingerprintEncryptedData = function (keystoreKeyAlias) {
        this.keychainItemServiceName = keystoreKeyAlias;
        var attributes = NSMutableDictionary.new();
        attributes.setObjectForKey(kSecClassGenericPassword, kSecClass);
        attributes.setObjectForKey(keystoreKeyAlias, kSecAttrService);
        SecItemDelete(attributes);
    };
    KeystoreAccess.prototype.cleanup = function () {
    };
    KeystoreAccess.prototype.createKeyChainEntry = function (context, data) {
        try {
            var accessControlRef = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleWhenUnlockedThisDeviceOnly, 1, null);
            var attributes = NSMutableDictionary.new();
            attributes.setObjectForKey(kSecClassGenericPassword, kSecClass);
            attributes.setObjectForKey(keychainItemIdentifier, kSecAttrAccount);
            attributes.setObjectForKey(this.keychainItemServiceName, kSecAttrService);
            var content = NSString.stringWithUTF8String(data);
            var nsData = content.dataUsingEncoding(NSUTF8StringEncoding);
            attributes.setObjectForKey(nsData, kSecValueData);
            attributes.setObjectForKey(accessControlRef, kSecAttrAccessControl);
            attributes.setObjectForKey(context, kSecUseAuthenticationContext);
            SecItemAdd(attributes, null);
            return true;
        }
        catch (ex) {
            console.trace(ex);
        }
        return false;
    };
    KeystoreAccess.prototype.readKeyChainEntry = function (biometricPromptMessage) {
        var attributes;
        try {
            attributes = NSMutableDictionary.new();
            attributes.setObjectForKey(kSecClassGenericPassword, kSecClass);
            attributes.setObjectForKey(this.keychainItemServiceName, kSecAttrService);
            attributes.setObjectForKey(true, kSecReturnData);
            attributes.setObjectForKey(biometricPromptMessage, kSecUseOperationPrompt);
            var privKeyRef = new interop.Reference();
            var resultData = void 0;
            var status_1 = SecItemCopyMatching(attributes, privKeyRef);
            if (status_1 == errSecSuccess) {
                resultData = privKeyRef.value;
                var result = NSString.alloc().initWithDataEncoding(resultData, NSUTF8StringEncoding).substringFromIndex(0);
                return result;
            }
        }
        catch (ex) {
            console.trace(ex);
        }
        return null;
    };
    KeystoreAccess.prototype.parseError = function (reject, code, message) {
        if (code == -1) {
            reject({
                code: keystore_access_common_1.ERROR_CODES.AUTHENTICATION_FAILED,
                message: message
            });
        }
        else if (code == -2 || code == -4 || code == -9) {
            reject({
                code: keystore_access_common_1.ERROR_CODES.CANCEL,
                message: message
            });
        }
        else if (code == -5) {
            reject({
                code: keystore_access_common_1.ERROR_CODES.TAMPERED_WITH,
                message: message
            });
        }
        else if (code == 10) {
            reject({
                code: keystore_access_common_1.ERROR_CODES.DEVELOPER_ERROR,
                message: message
            });
        }
        else if (code == 20) {
            reject({
                code: keystore_access_common_1.ERROR_CODES.NOT_AVAILABLE,
                message: message
            });
        }
    };
    return KeystoreAccess;
}());
exports.KeystoreAccess = KeystoreAccess;
//# sourceMappingURL=data:application/json;base64,